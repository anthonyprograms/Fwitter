angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,n){o.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(o,t,n){o.login=function(e,r){t.login(e,r).then(function(t){o.$emit("login",t.data),n.path("/")})},o.logout=function(){console.log("logout")}}]),angular.module("app").controller("LogoutCtrl",["$scope",function(o){o.logout=function(){console.log("logout"),o.currentUser=null}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,t){o.addPost=function(){o.postBody&&t.create({username:"anthonyprograms",body:o.postBody}).success(function(t){o.postBody=null})},t.fetch().success(function(t){o.posts=t}),o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(o,t,n){o.register=function(e,r){t.register(e,r).then(function(t){o.$emit("login",t),n.path("/login")})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.register=function(n,e){return o.post("/api/users",{username:n,password:e}).then(function(){return t.login(n,e)})}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(o){function t(){return"https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var n;this.connect=function(){n=new WebSocket(t()),n.onmessage=function(t){var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}},this.send=function(o,t){var e=JSON.strigify({topic:o,data:t});n.send(e)}}]).run(["WebSocketSvc",function(o){o.connect()}]);
//# sourceMappingURL=data:application/json;base64,