angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,o){t.currentUser=o}),t.logout=function(){t.currentUser=null}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,n,o){t.login=function(e,r){n.login(e,r).then(function(n){t.$emit("login",n.data),o.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"anthonyprograms",body:t.postBody}).success(function(n){t.postBody=null})},n.fetch().success(function(n){t.posts=n}),t.$on("ws:new_post",function(n,o){t.$apply(function(){t.posts.unshift(o)})})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,n,o){t.register=function(e,r,s){s===r&&n.register(e,r).then(function(s){n.login(e,r).then(function(n){t.$emit("login",n.data),o.path("/")})})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.login=function(o,e){return t.post("/api/sessions",{username:o,password:e}).then(function(o){return n.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,n.getUser()})},n.register=function(o,e){return t.post("/api/users",{username:o,password:e}).then(function(){return n.login(o,e)})}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(t){function n(){return"https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var o;this.connect=function(){o=new WebSocket(n()),o.onmessage=function(n){var o=JSON.parse(n.data);t.$broadcast("ws:"+o.topic,o.data)}},this.send=function(t,n){var e=JSON.strigify({topic:t,data:n});o.send(e)}}]).run(["WebSocketSvc",function(t){t.connect()}]);
//# sourceMappingURL=data:application/json;base64,