angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,n){t.currentUser=n}),t.$on("logout",function(){t.currentUser=null})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,o,n){t.login=function(e,r){o.login(e,r).then(function(o){t.$emit("login",o.data),n.path("/")})}}]),angular.module("app").controller("LogoutCtrl",["$scope",function(t){t.logout=function(){console.log("logout"),t.currentUser=null}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({username:"anthonyprograms",body:t.postBody}).success(function(o){t.postBody=null})},o.fetch().success(function(o){t.posts=o}),t.$on("ws:new_post",function(o,n){t.$apply(function(){t.posts.unshift(n)})})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,o,n){t.register=function(e,r){o.register(e,r).then(function(o){t.$emit("login",o),n.path("/login")})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users")},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then(function(n){return o.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,o.getUser()})},o.register=function(n,e){return t.post("/api/users",{username:n,password:e}).then(function(){return o.login(n,e)})}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(t){function o(){return"https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var n;this.connect=function(){n=new WebSocket(o()),n.onmessage=function(o){var n=JSON.parse(o.data);t.$broadcast("ws:"+n.topic,n.data)}},this.send=function(t,o){var e=JSON.strigify({topic:t,data:o});n.send(e)}}]).run(["WebSocketSvc",function(t){t.connect()}]);
//# sourceMappingURL=data:application/json;base64,